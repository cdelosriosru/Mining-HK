# PROJECT :     		Mining and Human Capital
# AUTHOR :				Camilo De Los Rios Rueda
# PURPOSE :				merge oil titles with municipalities in Colombia. This creates the data bases necessary to 
#                 perform the econometric analysis. I have three ways of measuring oil
# LAST REVISED BY :   	Camilo De Los Rios  Rueda



##==============================================================================
## INITIALIZE
##==============================================================================


library(dplyr)
library(sf)
library(sp)
library(rgdal)
library(maptools)
library(rgeos)
library(raster)
library(sf)
library(raster)
library(stars)
library(maps)
library(geosphere)
library(foreign)
library(tidyverse)
library(xlsx)
library(plyr)
library(cleangeo)


##==============================================================================
## PATHS
##==============================================================================
data = "C:/Users/camilodel/Desktop/IDB/MINING-HK/DATA"
oil = paste(data,"/Petroleo", sep="") 
municipios = paste(data,"/PoliticalBoundaries/Colombia", sep="")
#-----------------------------------IMPORTING FILES----------------------------------------

setwd(municipios)

mpios<- readOGR(dsn="municipios", layer="municipios") # EPSG:4326
mpios$a_m_km2<-area(mpios)/1000000 # create the area of each municipality; it might be useful.

setwd(oil)
oil<- readOGR(dsn="raw", layer="Tierras_SEPTIEMBRE_170919")

keep_oil <- c("FECHA_FIRM","ESTAD_AREA","OPR_ABR", "CUENCA_SED") 

oil <- oil[,(names(oil) %in% keep_oil)]
oil$ID<- seq.int(nrow(oil))

oil <- oil[grepl(c('EXPLORACION|PRODUCCION|TEA'),oil$ESTAD_AREA),]
oil$a_oil_km2<-area(oil)/1000000 
oil<-spTransform(oil, crs(mpios)) 
writeOGR(oil, dsn="harm", layer="oil", driver ="ESRI Shapefile", overwrite_layer = T)
oil <- readOGR(dsn="harm", layer="oil") 


#------BASICS--------- 
# Basic convertions that I need for more than one task. 

mpios<-clgeo_Clean(mpios)
oil<-clgeo_Clean(oil)

mpios_st<-st_as_sf(mpios)
oil_st<-st_as_sf(oil)


# set the folder where I want everything to be saved. 
setwd(paste(oil,'/harm',sep=""))

#------INTERSECTION------

mpios_oil<-raster::intersect(oil,mpios)
mpios_oil<-as.data.frame(mpios_oil)
write.dta(mpios_oil, "int_mpios_oil.dta")



#----CENTROIDS----

c_oil<-SpatialPointsDataFrame(gCentroid(oil, byid=TRUE), oil@data, match.ID = FALSE) 
c_oil_st<-st_as_sf(c_oil)
mpios_oil_st<-st_intersection(mpios_st,c_oil_st) 
mpios_oil<-as(mpios_oil_st,'Spatial')
mpios_oil_dta<- as.data.frame(mpios_oil, xy=TRUE, na.rm=TRUE)
write.dta(mpios_oil_dta, "cent_mpios_oil.dta")


#-------AREAS--------

#Ok this turned out to be a real nightmare.... The best thing that I can do, for now, is to merge all the polygons regardless of the date. 

    mx<-gIntersects(oil, byid=TRUE)
    
    # create a list for the results
    results.list<-as.list(vector(length=ncol(mx)))
    
    # group
    for(i in 1:ncol(mx)) {
      tmp <- which(mx[,i]) # get TRUE FALSE values for the i-th column
      ifelse(length(tmp)>1, # if there is more than 1 TRUE value,
             tmp.expand<-which(apply(mx[,tmp],1,any)), # get the row-number of the other TRUE Values and create a vector called expand
             tmp.expand<-tmp) # otherwise define tmp as expand
      while(length(tmp.expand)>length(tmp)){ # while tmp.expand has more items than tmp
        tmp<-tmp.expand # reset tmp to tmp.expand
        tmp.expand<-as.vector(which(apply(mx[,tmp],1,any))) # get all new row-numbers of new TRUE values
      }
      
      results.list[[i]]<-tmp.expand # store results in the list
      print(paste("nr", i, "out of", ncol(mx),"done", sep=" "))
    }
    
    # create unique ids from the results
    results.list<-
      llply(.data = results.list,
            .fun = function(x)paste(x,collapse=""))

    #join everything and convert to usual data type. It is to remark that we lose the attributes and I havent figuresd out how to keep them. This implies that we are not going to have a date to work with. 
    
    join<-unionSpatialPolygons(oil,IDs=results.list)
    join <- as(join, "SpatialPolygonsDataFrame")
    join<-clgeo_Clean(join)
    join_st <-st_as_sf(join)
    join_st$ID_j<- seq.int(nrow(join_st))

    # intersect - note that sf is intelligent with attribute data!
    pi <- st_intersection(mpios_st, join_st)
    as.data.frame(pi)
    
    # add in areas in m2
    attArea <- pi %>% 
      mutate(area = st_area(.) %>% as.numeric())
    
    # for each field get area per title
    attArea %>% 
      as_tibble() %>% 
      group_by(admin2Pcod, ID) %>% 
      summarize(area = sum(area))
    
    pi<-attArea
    pi$a_inter_pc<-(pi$area/1000000)/pi$a_m_km2
    pi<-as(pi,'Spatial')
    pi<-as.data.frame(pi)

    write.dta(data = pi , file = "area_mpios_oil.dta")
    
























